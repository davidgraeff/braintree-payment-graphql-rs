# source: https://payments.braintree-api.com/graphql
# timestamp: Wed Aug 28 2019 19:00:40 GMT+0000 (UTC)

"""
A NACHA standard entry class (SEC) code, which designates how an ACH transaction was authorized.
"""
enum ACHStandardEntryClassCode {
  """Corporate credit or debit."""
  CCD

  """Prearranged payment and deposit."""
  PPD

  """Telephone-initiated."""
  TEL

  """Internet-initiated/mobile."""
  WEB
}

"""Representation of an address."""
type Address {
  """Company name."""
  company: String

  """The street address."""
  streetAddress: String

  """Extended address information, such as apartment or suite number."""
  extendedAddress: String

  """First name."""
  firstName: String

  """Last name."""
  lastName: String

  """Locality/city."""
  locality: String

  """State or province."""
  region: String

  """
  Postal code, otherwise known as CAP, CEP, Eircode, NPA, PIN, PLZ, or ZIP code.
  """
  postalCode: String

  """Country code for the address in ISO 3166-1 alpha-3 format."""
  countryCode: CountryCodeAlpha3
}

"""Input fields for an Address."""
input AddressInput {
  """Company name. 255 character maximum."""
  company: String

  """The street address. 255 character maximum."""
  streetAddress: String

  """
  Extended address information, such as apartment or suite number. 255 character maximum.
  """
  extendedAddress: String

  """First name. 255 character maximum."""
  firstName: String

  """Last name. 255 character maximum."""
  lastName: String

  """Locality/city. 255 character maximum."""
  locality: String

  """State or province. 255 character maximum."""
  region: String

  """
  Postal code in any country's format, otherwise known as CAP, CEP, Eircode,
  NPA, PIN, PLZ, or ZIP code. Nine alphanumeric characters maximum, may also
  contain spaces and hyphens.
  *Required for Level 3 processing* on TransactionInput.
  """
  postalCode: String

  """
  Country code for the address in ISO 3166-1 alpha-3 format.
  *Required for Level 3 processing* on TransactionInput.
  """
  countryCode: CountryCodeAlpha3

  """Country code for the address in ISO 3166-1 alpha-3 format."""
  countryCodeAlpha3: String

  """Country code for the address in ISO 3166-1 alpha-2 format."""
  countryCodeAlpha2: String

  """Country code for the address in ISO 3166-1 numeric format."""
  countryCodeNumeric: String

  """Country name for the address."""
  countryName: String
}

"""
A monetary amount, either a whole number or a number with exactly two or three decimal places.
"""
scalar Amount

"""Configuration for Apple Pay on iOS."""
type ApplePayConfiguration {
  """The environment being used for Apple Pay."""
  status: ApplePayStatus

  """The Apple Pay country code for the current merchant."""
  countryCode: CountryCodeAlpha2

  """The Apple Pay currency ISO code for the current merchant."""
  currencyCode: CurrencyCodeAlpha

  """
  The merchant identifier that must be supplied when making an Apple Pay request.
  """
  merchantIdentifier: String

  """A list of card brands supported for Apple Pay by the current merchant."""
  supportedCardBrands: [CreditCardBrandCode]
}

"""Additional information about the payment method specific to Apple Pay."""
type ApplePayOriginDetails {
  """
  A human-readable description of the Apple Pay payment method. Usually consists
  of the Apple Pay card type and its last four digits. If there is no underlying
  credit card, this will describe the customer's payment method and the parent
  CreditCardDetail's last4 will be null.
  """
  paymentInstrumentName: String

  """
  The first 6 digits of the credit card, known as the Bank Identification
  Number. This BIN may differ from the BIN of the customer's actual card.
  """
  bin: String
}

"""The environment being used for Apple Pay."""
enum ApplePayStatus {
  MOCK
  OFF
  PRODUCTION
  mock
  off
  production
}

"""Configuration for Apple Pay on web."""
type ApplePayWebConfiguration {
  """The Apple Pay country code for the current merchant."""
  countryCode: CountryCodeAlpha2

  """The Apple Pay currency ISO code for the current merchant."""
  currencyCode: CurrencyCodeAlpha

  """
  The merchant identifier that must be supplied when making an Apple Pay request.
  """
  merchantIdentifier: String

  """A list of card brands supported for Apple Pay by the current merchant."""
  supportedCardBrands: [CreditCardBrandCode]
}

"""
Information about the [customer authentication regulation environment](https://developers.braintreepayments.com/guides/3d-secure/migration/javascript/v3#authentication-insight)
that applies to the payment method when processed with the provided merchant account.
"""
type AuthenticationInsight {
  """The merchant account used to determine authentication insight."""
  merchantAccountId: String

  """
  The customer authentication regulation environment that applies when
  transacting with this payment method and merchant account.
  """
  customerAuthenticationRegulationEnvironment: CustomerAuthenticationRegulationEnvironment
}

"""
Input fields when requesting authentication insight for a payment method.
"""
input AuthenticationInsightInput {
  """
  ID of the merchant account that will be used when charging this payment method.
  """
  merchantAccountId: ID!
}

"""Accompanying information for an authorization expired transaction."""
type AuthorizationExpiredEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """
  The date and time at which the authorization for this transaction was marked expired.
  """
  timestamp: Timestamp

  """The amount of the transaction for this status event."""
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""Accompanying information for an authorized transaction."""
type AuthorizedEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """The date and time at which the transaction was authorized."""
  timestamp: Timestamp

  """
  The amount the transaction was authorized for. This will match the amount on
  the transaction itself. In most cases, you cannot request to settle more than this amount.
  """
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """
  Fields describing the payment processor response to the authorization request.
  """
  processorResponse: TransactionProcessorResponse

  """Risk decision for this transaction."""
  riskDecision: RiskDecision

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""
Top-level input fields for creating a transaction by authorizing a payment method.
"""
input AuthorizePaymentMethodInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of a payment method to be authorized."""
  paymentMethodId: ID!

  """
  Input fields for the authorization, with details that will define the resulting transaction.
  """
  transaction: TransactionInput!
}

"""
Response codes from the processing bank's Address Verification System (AVS) and CVV verification.
"""
enum AvsCvvResponseCode {
  BYPASS
  DOES_NOT_MATCH
  ISSUER_DOES_NOT_PARTICIPATE
  MATCHES
  NOT_APPLICABLE
  NOT_PROVIDED
  NOT_VERIFIED
  SYSTEM_ERROR
}

"""Information about the credit card based on its BIN."""
type BinRecord {
  """Whether the card is prepaid, such as a gift card."""
  prepaid: BinRecordValue

  """
  Whether the card is designated only to be used for healthcare expenses.
  """
  healthcare: BinRecordValue

  """Whether the card is a debit card."""
  debit: BinRecordValue

  """
  Whether the card is regulated by the Durbin Amendment due to the bank's
  assets, and therefore has a maximum interchange rate.
  """
  durbinRegulated: BinRecordValue

  """
  Whether the card is a commercial card and capable of processing Level 2 transactions.
  """
  commercial: BinRecordValue

  """Whether the card is designated for employee wages."""
  payroll: BinRecordValue

  """The name of the bank that issued the card."""
  issuingBank: String

  """
  The country code for the country that issued the card in ISO 3166-1 alpha-3 format.
  """
  countryOfIssuance: CountryCodeAlpha3

  """
  A code representing any special program from the card issuer the card is part of.
  """
  productId: String
}

"""
A boolean-like value that includes `UNKNOWN` in the case where the information isn't available.
"""
enum BinRecordValue {
  NO
  UNKNOWN
  YES
  No
  Unknown
  Yes
}

"""Configuration for payment methods in legacy clients."""
type BraintreeApiConfiguration {
  """The URL for tokenizing payment methods."""
  url: String

  """The authentication for tokenizing payment methods."""
  accessToken: String
}

"""Top-level input fields for capturing an authorized transaction."""
input CaptureTransactionInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of a transaction to be captured."""
  transactionId: ID!

  """
  The amount to capture on the transaction. Must be greater than 0. You can't
  capture more than the authorized amount unless your industry and processor
  support settlement adjustment (capturing a certain percentage over the
  authorized amount); contact [Braintree
  support](mailto:support@braintreepayments.com) for details. If you capture an
  amount that is less than what was authorized, the transaction object will
  return the amount captured.
  """
  amount: Amount

  """
  Input fields for the capture, with details that will define the resulting transaction.
  """
  transaction: CaptureTransactionOptionsInput
}

"""
Input fields for a capture, with details that will define the resulting transaction.
"""
input CaptureTransactionOptionsInput {
  """
  The amount to capture on the transaction. Must be greater than 0. You can't
  capture more than the authorized amount unless your industry and processor
  support settlement adjustment (capturing a certain percentage over the
  authorized amount); contact [Braintree
  support](mailto:support@braintreepayments.com) for details. If you capture an
  amount that is less than what was authorized, the transaction object will
  return the amount captured.
  """
  amount: Amount

  """
  Fields used to define what will appear on a customer's bank statement for a
  specific purchase. If specified, this will update the existing descriptor on
  the transaction.
  """
  descriptor: TransactionDescriptorInput

  """
  Additional information about the transaction. On PayPal transactions, this
  field maps to the PayPal invoice number. PayPal invoice numbers must be unique
  in your PayPal business account. Maximum 255 characters or 127 for PayPal
  transactions. If specified, this will update the existing order ID on the transaction.
  """
  orderId: String
}

"""
A list of challenges that are required by the current merchant to process a given credit card.
"""
enum Challenge {
  CVV
  POSTAL_CODE
  cvv
  postal_code
}

"""
Top-level input fields for creating a transaction by charging a payment method.
"""
input ChargePaymentMethodInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of a payment method to be charged."""
  paymentMethodId: ID!

  """
  Input fields for the charge, with details that will define the resulting transaction.
  """
  transaction: TransactionInput!
}

"""
Top-level input fields for creating a transaction by charging a PayPal account.
"""
input ChargePayPalAccountInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The ID of an existing PayPal account."""
  paymentMethodId: ID!

  """Input fields related to the PayPal account being charged."""
  options: ChargePayPalAccountOptionsInput

  """
  Input fields for the charge, with details that will define the resulting transaction.
  """
  transaction: TransactionInput!
}

"""Input fields for creating a transaction with a PayPal account."""
input ChargePayPalAccountOptionsInput {
  """
  Variable passed directly to PayPal for your own tracking purposes. Customers do not see this value.
  """
  customField: String

  """
  Description of the transaction that is displayed to customers in PayPal email receipts.
  """
  description: String

  """Input fields for the PayPal account receiving the transaction funds."""
  payee: PayPalPayeeOptionsInput
}

"""
Top-level input fields for creating a transaction by charging a US bank account.
"""
input ChargeUsBankAccountInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The ID of an existing US bank account."""
  paymentMethodId: ID!

  """Input fields related to the US bank account being charged."""
  options: ChargeUsBankAccountOptionsInput

  """
  Input fields for the charge, with details that will define the resulting transaction.
  """
  transaction: TransactionInput!
}

"""Input fields for creating a transaction with a US bank account."""
input ChargeUsBankAccountOptionsInput {
  """
  A NACHA standard entry class (SEC) code, which designates how the transaction
  was authorized. Most internet-based sales should use the `WEB` code.
  """
  standardEntryClassCode: ACHStandardEntryClassCode
}

"""
Top-level input fields for creating a transaction by charging a Venmo account.
"""
input ChargeVenmoAccountInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The ID of an existing Venmo account."""
  paymentMethodId: ID!

  """Input fields for creating a Pay with Venmo transaction."""
  options: ChargeVenmoAccountOptionsInput

  """
  Input fields for the charge, with details that will define the resulting transaction.
  """
  transaction: TransactionInput!
}

"""Input fields for creating a Pay with Venmo transaction."""
input ChargeVenmoAccountOptionsInput {
  """Specifies which Venmo business profile to use for the transaction."""
  profileId: String
}

"""
A partial capture's relationship to its original authorizating transaction.
"""
type ChildCapture {
  """The original authorization whose funds have been partially captured."""
  parentAuthorization: Transaction
}

"""Top-level fields returned from the client configuration query."""
type ClientConfiguration {
  """URL to send analytics."""
  analyticsUrl: String @deprecated(reason: "This field is included for supporting SDKs that send analytics.")

  """Configuration for Apple Pay on iOS."""
  applePay: ApplePayConfiguration

  """Configuration for Apple Pay on the web."""
  applePayWeb: ApplePayWebConfiguration

  """
  A URL pointing to the base path of Braintree's web pages used for various browser switches and popups.
  """
  assetsUrl: String

  """A URL pointing to the base path of Braintree's client API."""
  clientApiUrl: String @deprecated(reason: "This field is included for supporting legacy clients.")

  """A list of ClientFeatures a Merchant supports."""
  supportedFeatures: [ClientFeature] @deprecated(reason: "This field is included for supporting legacy clients.")

  """Configuration for payment methods in legacy clients."""
  braintreeApi: BraintreeApiConfiguration @deprecated(reason: "This field is included for supporting legacy clients.")

  """Configuration for credit card tokenization."""
  creditCard: CreditCardConfiguration

  """The enum of the current environment."""
  environment: ClientConfigurationEnvironment

  """Configuration for Google Pay on Android and the web."""
  googlePay: GooglePayConfiguration

  """Configuration for iDEAL."""
  ideal: IDealConfiguration @deprecated(reason: "This field is included for supporting legacy clients.")

  """Configuration for Kount fraud tools."""
  kount: KountConfiguration

  """Configuration for Masterpass."""
  masterpass: MasterpassConfiguration

  """The current merchant ID based on the authentication used."""
  merchantId: String

  """Configuration for PayPal."""
  paypal: PayPalConfiguration

  """Configuration for Samsung Pay."""
  samsungPay: SamsungPayConfiguration

  """Configuration for UnionPay cards."""
  unionPay: UnionPayConfiguration

  """Configuration for U.S. bank account processing."""
  usBankAccount: UsBankAccountConfiguration

  """Configuration for Pay with Venmo."""
  venmo: VenmoConfiguration

  """Configuration for Visa Checkout."""
  visaCheckout: VisaCheckoutConfiguration
}

"""The client configuration environment being used."""
enum ClientConfigurationEnvironment {
  DEVELOPMENT
  PRODUCTION
  QA
  SANDBOX
  TEST
  development
  production
  qa
  sandbox
  test
}

"""
A value used by Braintree client SDKs to determine what operations are supported through this GraphQL API.
"""
enum ClientFeature {
  TOKENIZE_CREDIT_CARDS
  tokenize_credit_cards
}

"""Input fields for creating a client token."""
input ClientTokenInput {
  """
  Merchant account ID used to create the client token. Defaults to your default merchant account ID.
  """
  merchantAccountId: ID

  """
  An ID of an existing customer. Including this will allow your customer to vault and manage their payment methods.
  """
  customerId: ID
}

"""Top-level input field for confirming micro-transfer values."""
input ConfirmMicroTransferAmountsInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of the verification from vaulting the bank account."""
  verificationId: ID!

  """
  The amounts, in cents, of two deposits made into the customer's bank account
  after initiating a MICRO_TRANSFERS verification. These values should be
  collected from your customer.
  """
  amountsInCents: [Int!]!
}

"""
Top-level output field from confirming micro-transfer amounts on bank account.
"""
type ConfirmMicroTransferAmountsPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The verification that was run on the payment method prior to vaulting."""
  verification: Verification

  """The status of the micro-transfer amounts confirmation."""
  status: ConfirmMicroTransferAmountsStatus
}

"""The status of a micro-transfer amount confirmation."""
enum ConfirmMicroTransferAmountsStatus {
  AMOUNTS_DO_NOT_MATCH
  CONFIRMED
  TOO_MANY_ATTEMPTS
}

"""
An [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
country code. Braintree only accepts [specific alpha-2 values](https://developers.braintreepayments.com/reference/general/countries#list-of-countries).
"""
scalar CountryCodeAlpha2

"""
An [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)
country code. Braintree only accepts [specific alpha-3 values](https://developers.braintreepayments.com/reference/general/countries#list-of-countries).
"""
scalar CountryCodeAlpha3

"""Top-level input field for generating a client token."""
input CreateClientTokenInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """Input fields for creating a client token."""
  clientToken: ClientTokenInput
}

"""Top-level fields returned when creating a client token."""
type CreateClientTokenPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """A Base64 encoded string used to initialize client SDKs."""
  clientToken: String
}

"""Top-level field for creating a customer."""
input CreateCustomerInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """Input fields for creating a customer."""
  customer: CustomerInput
}

"""Top-level fields returned when creating a customer."""
type CreateCustomerPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """
  Information about the customer that was created. Can be used when vaulting
  payment methods or creating transactions to associate those objects.
  """
  customer: Customer
}

"""A code identifying the card brand."""
enum CreditCardBrandCode {
  AMERICAN_EXPRESS
  DINERS
  DISCOVER
  INTERNATIONAL_MAESTRO
  JCB
  MASTERCARD
  SOLO
  UK_MAESTRO
  UNION_PAY
  UNKNOWN
  VISA
  american_express
  diners
  discover
  international_maestro
  jcb
  mastercard
  solo
  uk_maestro
  union_pay
  unknown
  visa
}

"""Configuration for credit card tokenization."""
type CreditCardConfiguration {
  """
  A list of card brands supported for credit card processing by the current merchant.
  """
  supportedCardBrands: [CreditCardBrandCode]

  """
  A list of challenges that are required by the current merchant to process a given credit card.
  """
  challenges: [Challenge]

  """True if the current merchant supports 3D Secure."""
  threeDSecureEnabled: Boolean @deprecated(reason: "Use `threeDSecure` instead.")

  """Configuration for 3D Secure."""
  threeDSecure: ThreeDSecureConfiguration

  """True if fraud data collection is enabled for the current merchant."""
  fraudDataCollectionEnabled: Boolean
}

"""Details about a credit card."""
type CreditCardDetails {
  """A static code identifying the card brand."""
  brandCode: CreditCardBrandCode

  """The display name of the card brand, ex: Visa, American Express."""
  brand: String @deprecated(reason: "Use `brandCode` instead.")

  """The last four digits of the credit card number."""
  last4: String

  """
  The first 6 digits of the credit card number, known as the Bank Identification
  Number. If this card originates from a third party such as a wallet provider,
  this BIN may not be present and the PaymentMethodOriginDetails will contain a BIN instead.
  """
  bin: String

  """Information about the credit card based on its BIN."""
  binData: BinRecord

  """The month of the expiration date, formatted MM."""
  expirationMonth: String

  """The year of the expiration date, formatted YYYY."""
  expirationYear: String

  """A URL to an image logo representing the card brand."""
  imageUrl: String @deprecated(reason: "This field is included for supporting legacy clients.")

  """The cardholder's name."""
  cardholderName: String

  """
  An identifier that uniquely represents any credit card number, for cards
  stored in a merchant's vault. If the same credit card is added to a merchant's
  vault multiple times, each will have the same identifier. This identifier will
  only be returned if the field "origin" is null.
  """
  uniqueNumberIdentifier: String

  """
  Additional information if the credit card was provided from a third-party
  origin, such as Apple Pay, Google Pay, or another digital wallet.
  """
  origin: PaymentMethodOrigin
}

"""Input fields for a credit card object."""
input CreditCardInput {
  """
  The 12-to-19-digit value that uniquely identifies this credit card, also known as the primary account number or PAN.
  """
  number: String

  """
  The two- or four-digit year associated with a credit card, formatted `YYYY` or `YY`.
  """
  expirationYear: String

  """The expiration month of a credit card, formatted `MM`."""
  expirationMonth: String

  """
  A three- or four-digit card verification value assigned to credit cards. The
  CVV will never be stored, but it can be provided with one-time requests to
  verify the card.
  """
  cvv: String

  """
  When supplied, the cardholder name to be tokenized with the contents of the fields.
  """
  cardholderName: String

  """The billing address for the credit card."""
  billingAddress: AddressInput
}

"""A four-digit string."""
scalar CreditCardLast4

"""A number that passes Luhn validation."""
scalar CreditCardNumber

"""Information specific to verifications of credit card payment methods."""
type CreditCardVerificationDetails {
  """The amount used when performing the verification. May be 0."""
  amount: MonetaryAmount
}

"""
An [ISO 4217 alpha](https://en.wikipedia.org/wiki/ISO_4217) currency code.
Braintree only accepts [specific alpha
values](https://developers.braintreepayments.com/reference/general/currencies).
"""
scalar CurrencyCodeAlpha

"""Details about a custom actions payment method."""
type CustomActionsPaymentMethodDetails {
  """The action to be invoked when using the payment method."""
  actionName: String

  """Fields that your action requires."""
  fields: [CustomActionsPaymentMethodField!]
}

"""
Fields that are provided during tokenization and are presented to the invoked action to be consumed.
"""
type CustomActionsPaymentMethodField {
  """The name of this field. e.g. "accountNumber"."""
  name: String

  """The value displayed in the Control Panel or API. e.g. "*****6789"."""
  displayValue: String
}

"""
Fields that are provided during tokenization and are presented to the invoked action to be consumed.
"""
input CustomActionsPaymentMethodFieldInput {
  """The name of this field. e.g. "accountNumber"."""
  name: String!

  """The value of this field. e.g. "123456789"."""
  value: String!

  """The value displayed in the Control Panel or API. e.g. "*****6789"."""
  displayValue: String!
}

"""Input fields for a Custom Actions payment method."""
input CustomActionsPaymentMethodInput {
  """The action you wish to invoke when using the tokenized payment method."""
  actionName: String!

  """Fields that your action requires."""
  fields: [CustomActionsPaymentMethodFieldInput!]!
}

"""
Information about a customer and their associated payment methods and transactions.
"""
type Customer implements Node {
  """Unique identifier."""
  id: ID!

  """Legacy unique identifier."""
  legacyId: ID!

  """Company or business name associated with this customer."""
  company: String

  """Date and time at which the customer was created."""
  createdAt: Timestamp

  """
  Collection of custom field/value pairs. Custom fields are [defined in the Control Panel](https://articles.braintreepayments.com/control-panel/custom-fields#store-and-pass-back-fields).
  """
  customFields: [CustomField!]

  """Customer's default payment method."""
  defaultPaymentMethod: PaymentMethod

  """Email address for this customer."""
  email: String

  """Customer's first name."""
  firstName: String

  """Customer's last name."""
  lastName: String

  """Phone number for this customer."""
  phoneNumber: String

  """Payment methods belonging to this customer."""
  paymentMethods(first: Int, after: String): PaymentMethodConnection

  """
  Transactions associated with this customer. This includes transactions created
  by charging a vaulted payment method that belongs or belonged to the customer,
  or by passing a customer ID when charging an single-use payment method.
  """
  transactions(first: Int, after: String): TransactionConnection
}

"""
The customer authentication regulation environment that applies to the
transaction, such as [PSD2](https://www.braintreepayments.com/blog/understanding-and-preparing-for-psd2-strong-customer-authentication/).
"""
enum CustomerAuthenticationRegulationEnvironment {
  """
  EU Regulation [PSD2 Strong Customer Authentication](https://www.braintreepayments.com/blog/understanding-and-preparing-for-psd2-strong-customer-authentication/)
  applies to this transaction.
  """
  PSDTWO

  """
  Customer authentication regulation environment information is unavailable for this transaction at this time.
  """
  UNAVAILABLE

  """No customer authentication regulations apply to this transaction."""
  UNREGULATED
}

"""
Input fields for creating or updating a customer. On update, omitted fields will
not be updated. Passing a null value will assign null to that field.
"""
input CustomerInput {
  """Company or business name associated with the customer."""
  company: String

  """
  Collection of custom field/value pairs. You must [set up each custom field in the Control Panel](https://articles.braintreepayments.com/control-panel/custom-fields#creating-a-custom-field)
  prior to passing it with a request.
  """
  customFields: [CustomFieldInput!]

  """Email address for the customer."""
  email: String

  """Customer's first name."""
  firstName: String

  """Customer's last name."""
  lastName: String

  """Phone number for the customer."""
  phoneNumber: String
}

"""A merchant-defined custom field to store additional information."""
type CustomField {
  """The name of the custom field."""
  name: String

  """The value of the custom field."""
  value: String
}

"""
Custom field name/value pairs. Maximum 255 characters. You must [set up each
custom field in the Control Panel](https://articles.braintreepayments.com/control-panel/custom-fields#creating-a-custom-field)
prior to passing it with a request.
"""
input CustomFieldInput {
  """Name of the custom field as defined in the Control Panel."""
  name: CustomFieldName!

  """
  Value for the named custom field. A null value will ignore (on create) or remove (on update) the custom field.
  """
  value: String
}

"""
A string representing a custom field value. Contains letters, numbers, and underscores.
"""
scalar CustomFieldName

"""A date of the form YYYY-MM-DD."""
scalar Date

"""Top-level input fields for deleting a customer."""
input DeleteCustomerInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The ID of the customer to be deleted."""
  customerId: ID!
}

"""Top-level output field from deleting a customer."""
type DeleteCustomerPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String
}

"""
Top-level input fields for deleting a payment method referenced by a single-use token.
"""
input DeletePaymentMethodFromSingleUseTokenInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """A single-use token ID referencing a payment method."""
  singleUseTokenId: ID!
}

"""
Top-level output field from deleting a payment method referenced by a single-use token.
"""
type DeletePaymentMethodFromSingleUseTokenPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String
}

"""
Top-level input fields for deleting a multi-use payment method from the vault.
"""
input DeletePaymentMethodFromVaultInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The ID of the multi-use payment method to be deleted."""
  paymentMethodId: ID!
}

"""Top-level output field from deleting a multi-use payment method."""
type DeletePaymentMethodFromVaultPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String
}

"""
A card brand-specific two-digit string describing the mode of the transaction.
"""
scalar ECommerceIndicator

"""
Accompanying information for a transaction that failed because it could not be successfully sent to the processor.
"""
type FailedEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """The date and time at which the transaction failed."""
  timestamp: Timestamp

  """The amount of the transaction for this status event."""
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """
  Fields describing the payment processor response, or an explanation for the lack thereof.
  """
  processorResponse: TransactionProcessorResponse

  """Risk decision for this transaction."""
  riskDecision: RiskDecision

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""The third-party provider used to generate the risk decision."""
enum FraudServiceProvider {
  FRAUD_PROTECTION
  KOUNT
}

"""Accompanying information for a gateway rejected transaction."""
type GatewayRejectedEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """
  The date and time at which the transaction was rejected by the gateway.
  """
  timestamp: Timestamp

  """The amount of the transaction for this status event."""
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """
  The reason the transaction was rejected, based on your gateway settings.
  """
  gatewayRejectionReason: GatewayRejectionReason

  """
  Fields describing the payment processor response. Depending on your gateway
  settings, the AVS and CVV responses may be the reason for the rejection.
  """
  processorResponse: TransactionProcessorResponse

  """
  Risk decision for this transaction. If the gatewayRejectionReason is fraud, this may be the reason for the rejection.
  """
  riskDecision: RiskDecision

  """Whether this is the final state for the transaction."""
  terminal: Boolean

  """
  The original transaction if the gateway rejection reason was `DUPLICATE`.
  """
  duplicateOf: Transaction
}

"""Possible reasons why a transaction was rejected by the gateway."""
enum GatewayRejectionReason {
  APPLICATION_INCOMPLETE
  AVS
  AVS_AND_CVV
  CVV
  DUPLICATE
  FRAUD
  THREE_D_SECURE
  TOKEN_ISSUANCE
}

"""Configuration for Google Pay on Android and the web."""
type GooglePayConfiguration {
  """A string used to identify the merchant to the customer."""
  displayName: String

  """The environment being used for Google Pay."""
  environment: GooglePayEnvironment

  """Authorization to use when tokenizing a Google Pay payment method."""
  googleAuthorization: String @deprecated(reason: "This field is included for supporting legacy clients.")

  """
  A string used to identify the merchant's PayPal account when generating a PayPal Closed Loop Token.
  """
  paypalClientId: String

  """
  A list of card brands supported for Google Pay by the current merchant.
  """
  supportedCardBrands: [CreditCardBrandCode]
}

"""The environment being used for Google Pay."""
enum GooglePayEnvironment {
  PRODUCTION
  SANDBOX
  production
  sandbox
}

"""
Additional information about the payment method specific to Google Pay.
"""
type GooglePayOriginDetails {
  """A reference ID to the Google transaction."""
  googleTransactionId: String

  """
  The first 6 digits of the credit card, known as the Bank Identification
  Number. This BIN may differ from the BIN of the customer's actual card.
  """
  bin: String
}

"""Configuration for iDEAL."""
type IDealConfiguration {
  """The route ID used to process an iDEAL payment."""
  routeId: String

  """A URL used to redirect the customer to the bank's web page."""
  assetsUrl: String
}

"""Configuration for Kount fraud tools."""
type KountConfiguration {
  """
  The Kount merchant ID used to identify the fraud data collection request.
  """
  merchantId: String
}

"""
The type of object the legacyId represents when converting legacyId to ID.
"""
enum LegacyIdType {
  CUSTOMER
  PAYMENT_METHOD
  REFUND
  TRANSACTION
  VERIFICATION
}

"""Configuration for Masterpass."""
type MasterpassConfiguration {
  """
  The Masterpass merchant checkout ID used to identify the merchant in Masterpass requests.
  """
  merchantCheckoutId: String

  """
  A list of card brands supported for Masterpass by the current merchant.
  """
  supportedCardBrands: [CreditCardBrandCode]
}

"""
Additional information about the payment method specific to Masterpass.
"""
type MasterpassOriginDetails {
  """
  The first 6 digits of the credit card, known as the Bank Identification
  Number. This BIN may differ from the BIN of the customer's actual card.
  """
  bin: String
}

"""Details about a merchant and its current settings."""
type Merchant {
  """Unique identifier."""
  id: ID!

  """Current status."""
  status: String

  """Company name."""
  companyName: String

  """The merchant's main website."""
  website: String

  """The timezone that the merchant operates in."""
  timezone: String
}

"""A monetary amount with currency."""
type MonetaryAmount {
  """
  The amount of money, either a whole number or a number with exactly 2 or 3 decimal places.
  """
  value: Amount

  """The ISO code for the money's currency."""
  currencyIsoCode: CurrencyCodeAlpha
}

"""Input fields for searching for a transaction or refund amount."""
input MonetaryAmountSearchInput {
  """Find transactions for a given amount."""
  value: SearchRangeInput

  """Find transaction with a given currency."""
  currencyIsoCode: SearchTextInput
}

"""A two-digit, zero-padded month."""
scalar Month

"""
The top-level Mutation type. Mutations are used to make requests that create or modify data.
"""
type Mutation {
  """
  Authorize an eligible payment method and return a payload that includes details of the resulting transaction.
  """
  authorizePaymentMethod(input: AuthorizePaymentMethodInput!): TransactionPayload

  """
  Capture an authorized transaction and return a payload that includes details of the transaction.
  """
  captureTransaction(input: CaptureTransactionInput!): TransactionPayload

  """
  Charge any payment method and return a payload that includes details of the resulting transaction.
  """
  chargePaymentMethod(input: ChargePaymentMethodInput!): TransactionPayload

  """
  Charge a US bank account and return a payload that includes details of the
  resulting transaction. See
  https://developers.braintreepayments.com/guides/ach/configuration for
  information on eligibility and setup.
  """
  chargeUsBankAccount(input: ChargeUsBankAccountInput!): TransactionPayload

  """
  Charge a PayPal account and return a payload that includes details of the resulting transaction.
  """
  chargePayPalAccount(input: ChargePayPalAccountInput!): TransactionPayload

  """
  Charge a Venmo account and return a payload that includes details of the
  resulting transaction. See
  https://articles.braintreepayments.com/guides/payment-methods/venmo for
  information on eligibility and setup.
  """
  chargeVenmoAccount(input: ChargeVenmoAccountInput!): TransactionPayload

  """
  Vault payment information from a single-use payment method and return a
  payload that includes a new multi-use payment method.
  """
  vaultPaymentMethod(input: VaultPaymentMethodInput!): VaultPaymentMethodPayload

  """
  Vault payment information from a single-use US bank account payment method and
  return a payload that includes a new multi-use payment method.
  """
  vaultUsBankAccount(input: VaultUsBankAccountInput!): VaultPaymentMethodPayload

  """
  Refund a settled transaction and return a payload that includes details of the refund.
  """
  refundTransaction(input: RefundTransactionInput!): RefundTransactionPayload

  """
  Reverse a transaction and return a payload that includes either the voided transaction or a refund.
  """
  reverseTransaction(input: ReverseTransactionInput!): ReverseTransactionPayload

  """Run a verification on a multi-use payment method."""
  verifyPaymentMethod(input: VerifyPaymentMethodInput!): VerifyPaymentMethodPayload

  """Run a verification on a multi-use US bank account payment method."""
  verifyUsBankAccount(input: VerifyUsBankAccountInput!): VerifyPaymentMethodPayload

  """
  Confirm micro-transfer amounts initiated by vaultUsBankAccount or
  verifyUsBankAccount, completing the verification process for a US Bank Account
  via micro-transfer.
  """
  confirmMicroTransferAmounts(input: ConfirmMicroTransferAmountsInput!): ConfirmMicroTransferAmountsPayload

  """Delete a multi-use payment method from the vault."""
  deletePaymentMethodFromVault(input: DeletePaymentMethodFromVaultInput!): DeletePaymentMethodFromVaultPayload

  """
  Create a client token that can be used to initialize a client in order to tokenize payment information.
  """
  createClientToken(input: CreateClientTokenInput): CreateClientTokenPayload

  """
  Partially capture funds from a transaction that was successfully authorized
  and return a payload that includes a new transaction with information about
  the capture. This is only available for certain use cases. For more
  information about if this mutation fits your use case [see our docs](https://articles.braintreepayments.com/guides/payment-methods/paypal/processing#multiple-partial-settlements).
  """
  partialCaptureTransaction(input: PartialCaptureTransactionInput!): PartialCaptureTransactionPayload

  """
  Tokenize Custom Actions fields and return a payload that includes a single-use payment method.
  """
  tokenizeCustomActionsPaymentMethod(input: TokenizeCustomActionsPaymentMethodInput!): TokenizeCustomActionsPaymentMethodPayload

  """
  Tokenize credit card fields and return a payload that includes a single-use payment method.
  """
  tokenizeCreditCard(input: TokenizeCreditCardInput!): TokenizeCreditCardPayload

  """
  Tokenize a credit card's CVV and return a payload that includes a single-use payment method.
  """
  tokenizeCvv(input: TokenizeCvvInput!): TokenizeCvvPayload

  """
  Tokenize Samsung Pay Card fields and return a payload that includes a single-use payment method.
  """
  tokenizeSamsungPayCard(input: TokenizeSamsungPayCardInput!): TokenizeSamsungPayCardPayload

  """
  Tokenize U.S. bank account fields and return a payload that includes a single-use payment method.
  """
  tokenizeUsBankAccount(input: TokenizeUsBankAccountInput!): TokenizeUsBankAccountPayload

  """
  Tokenize U.S. bank login fields and return a payload that includes a single-use payment method.
  """
  tokenizeUsBankLogin(input: TokenizeUsBankLoginInput!): TokenizeUsBankAccountPayload

  """
  Create a customer for storing individual customer information and/or grouping transactions and multi-use payment methods.
  """
  createCustomer(input: CreateCustomerInput): CreateCustomerPayload

  """Update a customer's information."""
  updateCustomer(input: UpdateCustomerInput!): UpdateCustomerPayload

  """
  Delete a customer, breaking association between any of the customer's
  transactions. Will not delete if the customer has existing payment methods.
  """
  deleteCustomer(input: DeleteCustomerInput!): DeleteCustomerPayload

  """Delete a payment method referenced by a single-use token."""
  deletePaymentMethodFromSingleUseToken(input: DeletePaymentMethodFromSingleUseTokenInput!): DeletePaymentMethodFromSingleUseTokenPayload @deprecated(reason: "Use `deletePaymentMethodFromVault` instead.")
}

"""Relay compatible Node interface."""
interface Node {
  """Global ID for a given object."""
  id: ID!
}

"""The page information for a connection."""
type PageInfo {
  """Whether there is a next page available."""
  hasNextPage: Boolean!
}

"""
An original authorization's relationship to all its partial capture transactions.
"""
type ParentAuthorization {
  """The captures on a partially captured authorization."""
  childCaptures: [Transaction!]

  """
  The total amount authorized by this transaction. This amount will not change as this transaction is partially captured.
  """
  totalAmountAuthorized: MonetaryAmount
}

"""
A union of all possible relationships of transactions involved in partial
captures. If the transaction has been partially captured, this links to all its
partial capture children; if the transaction represents a partial capture
attempt, this links to the original parent authorization.
"""
union PartialCaptureDetails = ChildCapture | ParentAuthorization

"""
Top-level input fields for capturing an outstanding funds authorized by a transaction.
"""
input PartialCaptureTransactionInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of the original authorized transaction to be partially captured."""
  transactionId: ID!

  """
  Input fields for the capture, with details that will define the resulting capture transaction.
  """
  transaction: PartialCaptureTransactionOptionsInput
}

"""
Input fields for the capture, with details that will define the resulting capture transaction.
"""
input PartialCaptureTransactionOptionsInput {
  """
  The amount to capture on the transaction against the parent authorization
  transaction. Must be greater than 0. You can perform multiple partial capture
  transactions as long as the cumulative amount of those transactions is less
  than or equal to the amount authorized by the parent transaction. You can't
  capture more than the authorized amount unless your industry and processor
  support settlement adjustment (capturing a certain percentage over the
  authorized amount); contact [Braintree
  support](mailto:support@braintreepayments.com) for details.
  """
  amount: Amount!

  """
  Additional information about the transaction. On PayPal transactions, this
  field maps to the PayPal invoice number. PayPal invoice numbers must be unique
  in your PayPal business account. Maximum 255 characters or 127 for PayPal
  transactions. If specified, this will update the existing order ID on the transaction.
  """
  orderId: String
}

"""Top-level output field from partially capturing a transaction."""
type PartialCaptureTransactionPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The transaction representing the partial capture."""
  capture: Transaction
}

"""Top-level field representing a payment method."""
type PaymentMethod implements Node {
  """Unique identifier."""
  id: ID!

  """
  Legacy unique identifier. May be the same as id for single-use payment methods.
  """
  legacyId: ID!

  """Whether a payment method may be used only once or used multiple times."""
  usage: PaymentMethodUsage

  """
  Details about the payment method specific to the type (e.g. credit card, PayPal account).
  """
  details: PaymentMethodDetails

  """
  A paginated list of verifications that have been run against the payment method.
  """
  verifications(first: Int, after: String): VerificationConnection

  """The customer that the payment method belongs to."""
  customer: Customer
}

"""A paginated list of payment methods."""
type PaymentMethodConnection {
  """A list of payment methods."""
  edges: [PaymentMethodConnectionEdge]

  """Information about the page."""
  pageInfo: PageInfo!
}

"""A payment method within a PaymentMethodConnection."""
type PaymentMethodConnectionEdge {
  """
  This payment method's location within the PaymentMethodConnection. Used for requesting additional pages.
  """
  cursor: String

  """The payment method."""
  node: PaymentMethod
}

"""
A union of all possible payment method details. PaymentMethodDetails contain
information for display purposes, payment method management, and processing.
"""
union PaymentMethodDetails = CustomActionsPaymentMethodDetails | CreditCardDetails | PayPalAccountDetails | SamsungPayCardDetails | VenmoAccountDetails | UsBankAccountDetails

"""
Information about how the customer provided a payment method, such as via a digital wallet.
"""
type PaymentMethodOrigin {
  """An enum identifying the origin of the payment method."""
  type: PaymentMethodOriginType

  """When available, additional details specific to the origin."""
  details: PaymentMethodOriginDetails
}

"""
A union of all possible payment method origin details.
PaymentMethodOriginDetails contain additional information specific to the third
party the payment method was provided by.
"""
union PaymentMethodOriginDetails = ApplePayOriginDetails | GooglePayOriginDetails | MasterpassOriginDetails | SamsungPayOriginDetails | VisaCheckoutOriginDetails

"""
A value identifying the third-party origin from which a customer provided their payment method.
"""
enum PaymentMethodOriginType {
  APPLE_PAY
  GOOGLE_PAY
  MASTERPASS
  SAMSUNG_PAY
  VISA_CHECKOUT
}

"""
A union of all possible payment method details as they were used in a
transaction or verification. PaymentMethodSnapshot preserves values used to
create a given transaction or verify a payment method at that moment in time.
"""
union PaymentMethodSnapshot = CustomActionsPaymentMethodDetails | CreditCardDetails | PayPalTransactionDetails | VenmoAccountDetails | UsBankAccountDetails

"""
A value identifying the type of payment method used for a transaction. For
certain payment methods such as credit cards, this value also encodes the origin
from which a customer provided that payment method.
"""
enum PaymentMethodSnapshotSearchType {
  CREDIT_CARD
  CREDIT_CARD_VIA_APPLE_PAY
  CREDIT_CARD_VIA_GOOGLE_PAY
  CREDIT_CARD_VIA_MASTERPASS
  CREDIT_CARD_VIA_SAMSUNG_PAY
  CREDIT_CARD_VIA_VISA_CHECKOUT
  PAYPAL
  US_BANK_ACCOUNT
  VENMO_ACCOUNT
}

"""Possible usages for payment methods."""
enum PaymentMethodUsage {
  MULTI_USE
  SINGLE_USE
}

"""Details about a PayPal account."""
type PayPalAccountDetails {
  """The ID of the billing agreement for this PayPal account."""
  billingAgreementId: String

  """The email address associated with the PayPal account."""
  email: String

  """The PayPal ID of the PayPal account."""
  payerId: String

  """The first name on the PayPal account."""
  firstName: String

  """The last name on the PayPal account."""
  lastName: String
}

"""Configuration for PayPal."""
type PayPalConfiguration {
  """The merchant's company name to display to customers in the PayPal UI."""
  displayName: String

  """The merchant's PayPal client ID."""
  clientId: String

  """The merchant's privacy policy URL."""
  privacyUrl: String

  """The merchant's user agreement URL."""
  userAgreementUrl: String

  """
  A URL pointing to the base path of Braintree's web pages used for various browser switches and popups.
  """
  assetsUrl: String

  """The PayPal environment."""
  environment: PayPalEnvironment

  """For internal use only."""
  environmentNoNetwork: Boolean @deprecated(reason: "This field is only included for internal testing purposes.")

  """Whether the merchant has been vetted."""
  unvettedMerchant: Boolean

  """Braintree's PayPal client ID."""
  braintreeClientId: String

  """
  Whether billing agreements are enabled and should be used instead of future payments.
  """
  billingAgreementsEnabled: Boolean

  """
  The merchant account being used. This affects the currency code and other options.
  """
  merchantAccountId: String

  """The currency code to use."""
  currencyCode: CurrencyCodeAlpha

  """
  The email address of the PayPal account that will receive the funds when a transaction is created.
  """
  payeeEmail: String

  """For internal use only."""
  directBaseUrl: String @deprecated(reason: "This field is only included for internal testing purposes.")
}

"""The environment being used for PayPal."""
enum PayPalEnvironment {
  CUSTOM
  LIVE
  OFFLINE
  custom
  live
  offline
}

"""Input fields for a PayPal account receiving transaction funds."""
input PayPalPayeeOptionsInput {
  """The email address associated with the payee PayPal account."""
  email: String
}

"""PayPal-specific details on a transaction."""
type PayPalTransactionDetails {
  """
  If the transaction was successfully authorized, the PayPal ID for the authorization.
  """
  authorizationId: String

  """
  If funds for the transaction have settled, the PayPal ID for the capture of funds.
  """
  captureId: String

  """A string of field/value pairs passed directly to PayPal."""
  customField: String

  """Details about the payer or owner of the PayPal account."""
  payer: PayPalAccountDetails

  """Details about the PayPal account that received the funds."""
  payee: PayPalAccountDetails

  """Whether the PayPal account has been verified by PayPal."""
  payerStatus: String

  """The identification value of the payment within PayPal's API."""
  paymentId: String

  """If the transaction is a refund, the PayPal refund ID."""
  refundId: String

  """Whether the transaction qualifies for PayPal Seller Protection."""
  sellerProtectionStatus: String

  """Payer's tax ID. Only returned for payments from Brazilian accounts."""
  taxId: String

  """
  Payer's tax ID type. Only returned for payments from Brazilian accounts. Allowed values BR_CPF or BR_CNPJ.
  """
  taxIdType: String

  """The fee for the transaction charged by PayPal."""
  transactionFeeAmount: String

  """The currency code for the currency used for the transaction fee."""
  transactionFeeCurrencyIsoCode: String

  """
  Description of the transaction that is displayed to customers in PayPal email receipts.
  """
  description: String
}

"""Accompanying information for a processor declined transaction."""
type ProcessorDeclinedEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """
  The date and time at which the transaction was declined by the processor.
  """
  timestamp: Timestamp

  """The amount of the transaction for this status event."""
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """Whether the decline is the result of a temporary issue."""
  declineType: ProcessorDeclineType

  """
  Fields describing the payment processor response and why they declined the transaction.
  """
  processorResponse: TransactionProcessorResponse

  """Risk decision for this transaction."""
  riskDecision: RiskDecision

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""
Whether the decline is likely to be temporary or persistent. Can be taken into
consideration when determining whether to retry a declined charge.
"""
enum ProcessorDeclineType {
  """
  Hard declines are the result of an error or issue which can't be resolved
  immediately; the decline is not temporary and subsequent charges on the same
  payment method will likely not be successful.
  """
  HARD

  """
  Soft declines result from a temporary issue and can be retried; subsequent
  charges on the same payment method may be successful.
  """
  SOFT
}

"""The top-level Query type. Queries are used to fetch data."""
type Query {
  """Returns the literal string 'pong'."""
  ping: String!

  """The currently authenticated viewer."""
  viewer: Viewer

  """The client-side environment and payment method configuration."""
  clientConfiguration: ClientConfiguration

  """Fetch any object that extends the Node interface using its ID."""
  node(id: ID!): Node

  """
  Get a GraphQL ID from a legacy ID that was returned from an SDK or a legacyId
  field. Does not verify existence except for payment methods.
  """
  idFromLegacyId(legacyId: ID!, type: LegacyIdType!): ID!

  """The available reports."""
  report: Report

  """The available searches."""
  search: Search
}

"""The type of recurring payment a transaction represents."""
enum RecurringType {
  FIRST
  SUBSEQUENT
  UNSCHEDULED
}

"""
A refund of a charge on a payment method, representing an attempt to send money
from a previous transaction back to the customer.
"""
type Refund implements Node {
  """Unique identifier."""
  id: ID!

  """Legacy unique identifier."""
  legacyId: ID!

  """Time at which the refund was created."""
  createdAt: Timestamp

  """
  The amount that will be refunded, which can be less than or equal to the original charge amount.
  """
  amount: MonetaryAmount

  """
  The order ID for this refund. For PayPal transactions, the PayPal Invoice ID.
  """
  orderId: String

  """The current status of this refund."""
  status: TransactionStatus

  """
  The records of all statuses this transaction has passed through, with
  additional information on why each status occurred. Returned in reverse
  chronological order, with the most recent event first in the list.
  """
  statusHistory: [TransactionStatusEvent!]

  """The original transaction that this refunds."""
  refundedTransaction: Transaction
}

"""A paginated list of refunds."""
type RefundConnection {
  """A list of refunds."""
  edges: [RefundConnectionEdge]

  """Information about the page."""
  pageInfo: PageInfo!
}

"""A transaction within a RecundConnection."""
type RefundConnectionEdge {
  """
  This refund's location within the RefundConnection. Used for requesting additional pages.
  """
  cursor: String

  """The refund."""
  node: Refund
}

"""Specific input fields for describing a refund."""
input RefundInput {
  """
  Amount that should be refunded. Must be less than or equal to the amount of
  the original transaction. Defaults to the total amount of the original transaction.
  """
  amount: Amount

  """
  The refund's order ID. Defaults to the order ID of the original transaction.
  """
  orderId: String
}

"""Input fields for searching for refunds."""
input RefundSearchInput {
  """Find refunds with an id or ids."""
  id: SearchValueInput

  """Find refund for a given amount or currency."""
  amount: MonetaryAmountSearchInput

  """Find refunds with a given created at time."""
  createdAt: SearchTimestampInput

  """Find refunds with a given orderId."""
  orderId: SearchTextInput

  """Find refunds with a given status."""
  status: SearchTransactionStatusInput
}

"""Top-level input fields for refunding a transaction."""
input RefundTransactionInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of a transaction to be refunded."""
  transactionId: ID!

  """Input fields for the details of the refund."""
  refund: RefundInput
}

"""Top-level output field from refunding a transaction."""
type RefundTransactionPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The information about the refund created."""
  refund: Refund
}

"""Top-level fields returned for a report query."""
type Report {
  """Top-level fields returned in the transaction level fee report query."""
  transactionLevelFees(date: Date!, merchantAccountId: ID): TransactionLevelFeeReport
}

"""Input fields for reversing a transaction."""
input ReverseTransactionInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The ID of the transaction to reverse."""
  transactionId: ID!
}

"""Top-level output field for reversing a transaction."""
type ReverseTransactionPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """
  A transaction (if the original transaction was voided) or refund (if the
  original transaction was refunded). A reversal will attempt to void the
  original transaction if it has not yet settled. If the original transaction
  has settled, a reversal will create a refund for the full amount.
  """
  reversal: TransactionReversal
}

"""A right assigned to a user."""
type Right {
  """Human readable name."""
  name: String
}

"""Data from advanced risk evaluations."""
type RiskData {
  """Unique identifier."""
  id: ID

  """The risk decision on whether the transaction should be permitted."""
  decision: RiskDecision

  """
  Whether data associated with the customer's device was captured and used in the decision process.
  """
  deviceDataCaptured: Boolean

  """The third-party provider used to generate the risk decision."""
  fraudServiceProvider: FraudServiceProvider
}

"""Input fields for a risk data object."""
input RiskDataInput {
  """
  The User-Agent header provided by the customer's browser, which gives
  information about the browser. Maximum 255 characters.
  """
  customerBrowser: String

  """The customer's IP address."""
  customerIp: String

  """
  Customer device information. Required when creating transactions using cards
  (only if using Advanced Fraud Tools), PayPal (only for one-time Vaulted PayPal
  transactions), and Venmo payment method types. This value will contain a Fraud
  Merchant ID as the unique, numeric identifier for a Kount account and a Device
  Session ID as the unique identifier for a customer device. For PayPal and
  Venmo transactions, this value will also include a PayPal Correlation ID.
  """
  deviceData: String
}

"""
The risk decision provides further context on how a transaction was scored for risk by Braintree.
"""
enum RiskDecision {
  APPROVE
  DECLINE
  NOT_EVALUATED
  REVIEW
}

"""Groups of rights assigned to a user."""
type Role {
  """Unique identifier."""
  id: ID!

  """Human readable name."""
  name: String

  """Whether the role grants account admin status."""
  isAccountAdmin: Boolean

  """Right names associated with role."""
  rights: [Right!]
}

"""Details about a Samsung Pay card."""
type SamsungPayCardDetails {
  """The display name of the card brand, ex: Visa, American Express."""
  brand: String

  """
  A static code identifying the card brand of the FPAN (the customer's actual backing card).
  """
  brandCode: CreditCardBrandCode

  """
  The first 6 digits of the credit card, known as the Bank Identification
  Number. This BIN will differ from the BIN of the source (customer's actual) card.
  """
  bin: String

  """
  Information about the credit card based on its BIN. This BIN will differ from
  the BIN of the source (customer's actual) card.
  """
  binData: BinRecord

  """Last four digits of the FPAN (the customer's actual backing card)."""
  sourceCardLast4: CreditCardLast4
}

"""Input fields for a Samsung Pay Card object."""
input SamsungPayCardInput {
  """
  A one-time-use string generated by the token requester to validate the transaction.
  """
  cryptogram: String!

  """
  A two-digit string that should be passed along in the authorization message.
  """
  eCommerceIndicator: ECommerceIndicator!

  """A two-digit string representing the expiration month of the DPAN."""
  expirationMonth: Month!

  """A four-digit string representing the expiration year of the DPAN."""
  expirationYear: Year!

  """
  The card number provided by Samsung and used in processing. This is a
  digitized PAN (DPAN), not the backing card number (FPAN).
  """
  number: CreditCardNumber!

  """The last four digits of the FPAN (the cardholder's backing card)."""
  sourceCardLast4: CreditCardLast4!
}

"""Configuration for Samsung Pay on Android."""
type SamsungPayConfiguration {
  """A string used to identify the merchant to the customer."""
  displayName: String

  """The Samsung Pay environment."""
  environment: SamsungPayEnvironment

  """The Samsung Pay service ID."""
  serviceId: String

  """Authorization to use when tokenizing Samsung Pay."""
  samsungAuthorization: String

  """
  A list of card brands supported for Samsung Pay by the current merchant.
  """
  supportedCardBrands: [CreditCardBrandCode]
}

"""The environment being used for Samsung Pay."""
enum SamsungPayEnvironment {
  PRODUCTION
  SANDBOX
}

"""
Additional information about the payment method specific to Samsung Pay.
"""
type SamsungPayOriginDetails {
  """
  The first 6 digits of the credit card, known as the Bank Identification
  Number. This BIN may differ from the BIN of the customer's actual card.
  """
  bin: String
}

"""Top-level fields returned for a search query."""
type Search {
  """
  A paginated list of transactions that match the TransactionSearchInput.
  """
  transactions(input: TransactionSearchInput!, first: Int, after: String): TransactionConnection

  """A paginated list of refunds that match the RefundSearchInput."""
  refunds(input: RefundSearchInput!, first: Int, after: String): RefundConnection
}

"""Input fields for searching transactions by customer."""
input SearchCustomerInput {
  """Find transactions with a given customer id."""
  id: SearchValueInput
}

"""
Input fields for searching transactions by payment method snapshot type.
"""
input SearchPaymentMethodSnapshotTypeInput {
  """
  This value represents the payment method used to create a transaction. In the
  case of credit cards, this value also encode the origin from which a customer
  provided that payment method.
  """
  is: PaymentMethodSnapshotSearchType

  """
  These values represent the payment method used to create a transaction. In the
  case of credit cards, these values also encode the origin from which a
  customer provided that payment method.
  """
  in: [PaymentMethodSnapshotSearchType!]
}

"""Input fields for searching for a range."""
input SearchRangeInput {
  """Field is exactly this value."""
  is: String

  """Field is greater than or equal to this value."""
  greaterThanOrEqualTo: String

  """Field is less than or equal to this value."""
  lessThanOrEqualTo: String
}

"""Input fields for searching text fields."""
input SearchTextInput {
  """Field is exactly this value."""
  is: String

  """Field is not this value."""
  isNot: String

  """Field starts with this value."""
  startsWith: String

  """Field ends with this value."""
  endsWith: String

  """Field contains this value."""
  contains: String
}

"""
Input fields for searching for a timestamp. These ranges are precise to the
minute; the results of search for transactions or refunds created between
12/17/2015 17:00 and 12/17/2015 17:00 will include a transaction created at
12/17/2015 17:00:59.
"""
input SearchTimestampInput {
  """Timestamp is greater than or equal to this value."""
  greaterThanOrEqualTo: Timestamp

  """Timestamp is less than or equal to this value."""
  lessThanOrEqualTo: Timestamp
}

"""
Input fields for searching for a transaction or refund with a given status.
"""
input SearchTransactionStatusInput {
  """The transaction status is exactly this value."""
  is: TransactionStatus

  """The transaction status is one of these values."""
  in: [TransactionStatus!]
}

"""Transaction status transition times."""
input SearchTransactionStatusTransitionInput {
  """Find transactions with a given failed at time."""
  failedAt: SearchTimestampInput

  """Find transactions with a given settled at time."""
  settledAt: SearchTimestampInput

  """Find transactions with a given submitted for settlement time."""
  submittedForSettlementAt: SearchTimestampInput

  """Find transactions with a given voided at time."""
  voidedAt: SearchTimestampInput
}

"""Input fields for searching for specific values."""
input SearchValueInput {
  """Field is exactly this value."""
  is: String

  """Field is one of these values."""
  in: [String!]
}

"""Accompanying information for a settled transaction."""
type SettledEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """The date and time at which the transaction was settled."""
  timestamp: Timestamp

  """
  The amount the transaction was settled for, in the same currency as the
  original authorization (aka the "presentment" currency.) If you have elected
  to settle the transaction into a bank account with a different currency, this
  will not reflect that.
  """
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """Fields describing the payment processor response."""
  processorResponse: TransactionProcessorResponse

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""Accompanying information for a settlement declined transaction."""
type SettlementDeclinedEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """
  The date and time at which the processor declined to settle this transaction.
  """
  timestamp: Timestamp

  """The amount of the transaction for this status event."""
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """
  Fields describing the payment processor response to the settlement request.
  """
  processorResponse: TransactionProcessorResponse

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""
Accompanying information for a settlement pending transaction. Typically only occurs for PayPal transactions.
"""
type SettlementPendingEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """The date and time at which the transaction became settlement pending."""
  timestamp: Timestamp

  """The amount of the transaction for this status event."""
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """
  Fields describing the payment processor response to the settlement request.
  """
  processorResponse: TransactionProcessorResponse

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""
Accompanying information for a transaction that is settling. This is typically a
transient state during which the transaction is being settled with the processor.
"""
type SettlingEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """The date and time at which the transaction began settling."""
  timestamp: Timestamp

  """
  The amount of the transaction for this status event. This should match the amount submitted for settlement.
  """
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""
Accompanying information for a transaction that is submitted for settlement.
This status indicates that the transaction is scheduled to be settled.
"""
type SubmittedForSettlementEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """
  The date and time at which the transaction was submitted for settlement.
  """
  timestamp: Timestamp

  """
  The amount that was submitted for settlement. This can differ from the authorized amount, but by default is the same.
  """
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""Configuration for 3D Secure."""
type ThreeDSecureConfiguration {
  """
  Authentication information for initializing Cardinal's songbird.js library.
  """
  cardinalAuthenticationJWT: String
}

"""
An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Times) timestamp with microsecond precision.
"""
scalar Timestamp

"""Top-level input fields for tokenizing a credit card."""
input TokenizeCreditCardInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """Input fields for a credit card object."""
  creditCard: CreditCardInput!

  """Credit card tokenization options."""
  options: TokenizeCreditCardOptionsInput
}

"""Credit card tokenization options."""
input TokenizeCreditCardOptionsInput {
  """
  Whether to run validations on credit card fields. Validations are not run by default.
  """
  validate: Boolean
}

"""Top-level fields returned from a tokenized credit card."""
type TokenizeCreditCardPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """A one-time-use reference to tokenized sensitive information."""
  token: String @deprecated(reason: "Use `paymentMethod.id` instead.")

  """Details about the tokenized CreditCard."""
  creditCard: CreditCardDetails @deprecated(reason: "Use `paymentMethod.details` instead.")

  """A single-use payment method."""
  singleUseToken: PaymentMethod @deprecated(reason: "Use `paymentMethod` instead.")

  """A single-use payment method."""
  paymentMethod: PaymentMethod

  """
  Information about the [customer authentication regulation environment](https://developers.braintreepayments.com/guides/3d-secure/migration/javascript/v3#authentication-insight)
  that applies to the payment method when processed with the provided merchant
  account. This can be used to determine whether to perform 3D Secure
  authentication.
  """
  authenticationInsight(input: AuthenticationInsightInput!): AuthenticationInsight
}

"""Top-level input fields for tokenizing Custom Actions."""
input TokenizeCustomActionsPaymentMethodInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """Input fields for a Custom Actions payment method."""
  customActionsPaymentMethod: CustomActionsPaymentMethodInput!
}

"""
Top-level fields returned from tokenizing a CustomActionsPaymentMethod.
"""
type TokenizeCustomActionsPaymentMethodPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """A single-use payment method."""
  paymentMethod: PaymentMethod
}

"""Top-level input fields for tokenizing a CVV."""
input TokenizeCvvInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """
  A 3 or 4 digit card verification value assigned to credit cards. The CVV will
  never be stored, but it can be provided with one-time requests to verify the card.
  """
  cvv: String!
}

"""Top-level fields returned from a tokenized CVV."""
type TokenizeCvvPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """A single-use payment method."""
  singleUseToken: PaymentMethod
}

"""Top-level input field for tokenizing a Samsung Pay Card."""
input TokenizeSamsungPayCardInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """Input fields for a Samsung Pay Card object."""
  samsungPayCard: SamsungPayCardInput!
}

"""Top-level fields returned from a tokenized Samsung Pay Card."""
type TokenizeSamsungPayCardPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """A one-time-use reference to tokenized sensitive information."""
  singleUseToken: PaymentMethod @deprecated(reason: "Use `paymentMethod` instead.")

  """A single-use payment method."""
  paymentMethod: PaymentMethod
}

"""Top-level input fields for tokenizing a U.S. bank account."""
input TokenizeUsBankAccountInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """Input fields for a U.S. bank account object."""
  usBankAccount: UsBankAccountInput!
}

"""Top-level fields returned from a tokenized U.S. bank account."""
type TokenizeUsBankAccountPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """A single-use payment method."""
  paymentMethod: PaymentMethod
}

"""Top-level input fields for tokenizing a U.S. bank login."""
input TokenizeUsBankLoginInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """Input fields for a U.S. bank login object."""
  usBankLogin: UsBankLoginInput!
}

"""A charge on a payment method."""
type Transaction implements Node {
  """Unique identifier."""
  id: ID!

  """Legacy unique identifier."""
  legacyId: ID!

  """Time at which the transaction was created."""
  createdAt: Timestamp

  """
  Snapshot of payment method details used to create the transaction, preserved
  at the time the transaction was created. This will always be present.
  """
  paymentMethodSnapshot: PaymentMethodSnapshot

  """
  The multi-use payment method associated with the transaction. Only present if
  a multi-use payment method was used to create the transaction and it has not
  been deleted. The details of this PaymentMethod may have changed since the
  transaction was created, details used for the transaction can be found in the
  `paymentMethodSnapshot` field.
  """
  paymentMethod: PaymentMethod

  """
  The amount charged in this transaction. For transactions that are partially
  captured, this amount will be the cummulative amount captured on this transaction.
  """
  amount: MonetaryAmount

  """
  Collection of custom field/value pairs. Custom fields are [defined in the Control Panel](https://articles.braintreepayments.com/control-panel/custom-fields#store-and-pass-back-fields).
  """
  customFields: [CustomField!]

  """The ID of the merchant account that processed this transaction."""
  merchantAccountId: ID

  """
  The order ID for this transaction. For PayPal transactions, the PayPal Invoice ID.
  """
  orderId: String

  """
  A purchase order identification value you associate with this transaction.
  """
  purchaseOrderNumber: String

  """The current status of this transaction."""
  status: TransactionStatus

  """Fields describing the payment processor response."""
  processorResponse: TransactionProcessorResponse @deprecated(reason: "Use relevant events in `statusEvents` instead.")

  """Risk data evaluated for this transaction."""
  riskData: RiskData

  """
  Fields used to define what will appear on customers' credit card statements for a specific purchase.
  """
  descriptor: TransactionDescriptor

  """
  The records of all statuses this transaction has passed through, with
  additional information on why each status occurred. Returned in reverse
  chronological order, with the most recent event first in the list.
  """
  statusHistory: [TransactionStatusEvent!]

  """
  If the transaction request was performed through a shopping cart provider or
  Braintree partner, this field will have a string identifier for that shopping
  cart provider or partner. For PayPal transactions, this maps to the PayPal
  account's bn_code.
  """
  channel: String

  """Customer associated with the transaction, if applicable."""
  customer: Customer

  """Shipping information."""
  shipping: TransactionShipping

  """Tax information."""
  tax: TransactionTaxInformation

  """Discount amount that was included in the total transaction amount."""
  discountAmount: String

  """Line items for this transaction."""
  lineItems: [TransactionLineItem!]

  """The list of refunds issued against this transaction."""
  refunds: [Refund!]

  """
  For transactions created or captured using the `partialCaptureTransaction`
  mutation. This field links a given transaction to its original authorization
  or all its partial captures.
  """
  partialCaptureDetails: PartialCaptureDetails
}

"""A paginated list of transactions."""
type TransactionConnection {
  """A list of transactions."""
  edges: [TransactionConnectionEdge]

  """Information about the page."""
  pageInfo: PageInfo!
}

"""A transaction within a TransactionConnection."""
type TransactionConnectionEdge {
  """
  This transaction's location within the TransactionConnection. Used for requesting additional pages.
  """
  cursor: String

  """The transaction."""
  node: Transaction
}

"""
Fields used to define what will appear on a customer's bank statement for a specific purchase.
"""
type TransactionDescriptor {
  """The value in the business name field of a customer's statement."""
  name: String

  """The value in the phone number field of a customer's statement."""
  phone: String

  """The value in the URL/web address field of a customer's statement."""
  url: String
}

"""
Fields used to define what will appear on a customer's bank statement for a specific purchase.
"""
input TransactionDescriptorInput {
  """The value in the business name field of a customer's statement."""
  name: String

  """The value in the phone number field of a customer's statement."""
  phone: String

  """The value in the URL/web address field of a customer's statement."""
  url: String
}

"""Input fields for creating a transaction."""
input TransactionInput {
  """
  Billing amount of the request. This value must be greater than 0, and must
  match the currency format of the merchant account. Can only contain numbers
  and one decimal point (e.g. x.xx). Can't be greater than the maximum allowed
  by the processor.
  """
  amount: Amount!

  """
  Merchant account ID used to process the transaction. Currency is also
  determined by merchant account ID. If no merchant account ID is specified, we
  will use your default merchant account.
  """
  merchantAccountId: ID

  """
  Additional information about the transaction. On PayPal transactions, this
  field maps to the PayPal invoice number. PayPal invoice numbers must be unique
  in your PayPal business account. Maximum 255 characters or 127 for PayPal transactions.
  """
  orderId: String

  """
  A purchase order identification value you associate with this transaction.
  *Required for Level 2 processing*.
  """
  purchaseOrderNumber: String

  """
  Customer device information, which is sent directly to supported processors for fraud analysis.
  """
  riskData: RiskDataInput

  """
  Collection of custom field/value pairs. You must [set up each custom field in the Control Panel](https://articles.braintreepayments.com/control-panel/custom-fields#creating-a-custom-field)
  prior to passing it with a request.
  """
  customFields: [CustomFieldInput!]

  """
  Fields used to define what will appear on a customer's bank statement for a specific purchase.
  """
  descriptor: TransactionDescriptorInput

  """The type of recurring payment the transaction represents."""
  recurring: RecurringType

  """
  For partners and shopping carts only. If you are a shopping cart provider or
  other Braintree partner, pass a string identifier for your service. For PayPal
  transactions, this maps to paypal.bn_code.
  """
  channel: String

  """
  If charging a single-use payment method, optional ID of a customer to associate the transaction with.
  """
  customerId: ID

  """
  Shipping information.
  *Required for Level 3 processing*.
  """
  shipping: TransactionShippingInput

  """
  Tax information about the transaction.
  *Required for Level 2 processing*.
  """
  tax: TransactionTaxInput

  """
  Discount amount that was included in the total transaction amount. Does not
  add to the total amount the payment method will be charged. This value can't be negative.
  *Required for Level 3 processing*.
  """
  discountAmount: String

  """
  Line items for this transaction. Up to 249 line items may be specified.
  *Required for Level 3 processing*.
  """
  lineItems: [TransactionLineItemInput!]
}

"""
The [transaction-level fee report](https://articles.braintreepayments.com/control-panel/reporting/transaction-level-fee-report)
provides a breakdown of fees associated with individual transactions.
"""
type TransactionLevelFeeReport {
  """The URL where you can access the requested report."""
  url: String
}

"""Data for individual line items on a transaction."""
type TransactionLineItem {
  """Item name."""
  name: String

  """Indicates whether the line item is a sale or refund."""
  kind: TransactionLineItemType

  """Number of units of the item purchased."""
  quantity: String

  """Per-unit price of the item."""
  unitAmount: String

  """
  Total price amount for the line item: quantity multiplied by unitAmount.
  """
  totalAmount: String

  """Per-unit tax price of the item."""
  unitTaxAmount: String

  """Tax amount for the line item."""
  taxAmount: String

  """Amount of discount for the line item."""
  discountAmount: String

  """The unit of measure or the unit of measure code."""
  unitOfMeasure: String

  """Product or UPC code for the item."""
  productCode: String

  """
  Code used to classify items purchased and track the total amount spent across
  various categories of products and services. Different corporate purchasing
  organizations may use different standards, but the [United Nations Standard
  Products and Services Code (UNSPSC)](https://www.unspsc.org/) is frequently used.
  """
  commodityCode: String

  """Item description."""
  description: String

  """The URL to product information."""
  url: String
}

"""Data for individual line items on a transaction."""
input TransactionLineItemInput {
  """
  Item name. Maximum 35 characters, or 127 characters for PayPal transactions.
  *Required for Level 3 processing*.
  """
  name: String!

  """
  Indicates whether the line item is a sale or refund.
  *Required for Level 3 processing*.
  """
  kind: TransactionLineItemType!

  """
  Number of units of the item purchased. Can include up to 4 decimal places. This value can't be negative or zero.
  *Required for Level 3 processing*.
  """
  quantity: String!

  """
  Per-unit price of the item. Maximum 4 decimal places, or 2 decimal places for
  PayPal transactions. This value can't be negative or zero.
  *Required for Level 3 processing*.
  """
  unitAmount: String!

  """
  Total price amount for the line item: quantity multiplied by unitAmount. Can include up to 2 decimal places.
  *Required for Level 3 processing*.
  """
  totalAmount: String!

  """
  Per-unit tax price of the item. Can include up to 2 decimal places. This value can't be negative or zero.
  *Required for Level 3 processing*.
  """
  unitTaxAmount: String

  """
  Tax amount for the line item. Can include up to 2 decimal places. This value can't be negative.
  *Required for Level 3 processing*.
  """
  taxAmount: String

  """
  Amount of discount for the line item. Can include up to 2 decimal places. This value can't be negative.
  *Required for Level 3 processing*.
  """
  discountAmount: String

  """
  The unit of measure or the unit of measure code. Maximum 12 characters.
  *Required for Level 3 processing*.
  """
  unitOfMeasure: String

  """
  Product or UPC code for the item. Maximum 12 characters, or 127 characters for PayPal transactions.
  *Required for Level 3 processing*.
  """
  productCode: String

  """
  Code used to classify items purchased and track the total amount spent across
  various categories of products and services. Different corporate purchasing
  organizations may use different standards, but the [United Nations Standard
  Products and Services Code (UNSPSC)](https://www.unspsc.org/) is frequently
  used. Maximum 12 characters.
  *Required for Level 3 processing*.
  """
  commodityCode: String

  """
  Item description. Maximum 127 characters.
  *Required for Level 3 processing*.
  """
  description: String

  """
  A URL to information about the product.
  *Required for Level 3 processing*.
  """
  url: String
}

"""
Indicates whether a transaction line item is a debit (sale) or credit (refund).
"""
enum TransactionLineItemType {
  CREDIT
  DEBIT
}

"""Top-level output field from creating a transaction."""
type TransactionPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The transaction representing the charge on the payment method."""
  transaction: Transaction
}

"""Detailed response information from the processor."""
type TransactionProcessorResponse {
  """
  The [processor response code](https://developers.braintreepayments.com/reference/general/processor-responses/authorization-responses)
  indicating the result of attempting to process this transaction.
  """
  legacyCode: String

  """The text explanation of the processor response code."""
  message: String

  """The processing bank's response to the provided CVV."""
  cvvResponse: AvsCvvResponseCode

  """
  The processing bank's response to the provided billing postal or zip code.
  """
  avsPostalCodeResponse: AvsCvvResponseCode

  """The processing bank's response to the provided billing street address."""
  avsStreetAddressResponse: AvsCvvResponseCode
}

"""
A union of all possible results of a transaction reversal. If the transaction
has been settled, a refund will be issued and a Refund returned. Otherwise, the
transaction will be voided and a Transaction returned.
"""
union TransactionReversal = Refund | Transaction

"""Input fields for searching for transactions."""
input TransactionSearchInput {
  """Find transactions with an id or ids."""
  id: SearchValueInput

  """Find transactions for a given amount or currency."""
  amount: MonetaryAmountSearchInput

  """Find transactions with a given orderId."""
  orderId: SearchTextInput

  """Find transactions with a given transaction status."""
  status: SearchTransactionStatusInput

  """Find transactions with a given created at time."""
  createdAt: SearchTimestampInput

  """Find transactions based on given transaction status transition times."""
  statusTransition: SearchTransactionStatusTransitionInput

  """Find transactions with a given customer."""
  customer: SearchCustomerInput

  """
  Find transactions created by charging payment methods of the given type.
  """
  paymentMethodSnapshotType: SearchPaymentMethodSnapshotTypeInput
}

"""Information related to shipping a physical product."""
type TransactionShipping {
  """Shipping address information."""
  shippingAddress: Address

  """Shipping cost on the entire transaction."""
  shippingAmount: Amount

  """The postal code of the source shipping location."""
  shipsFromPostalCode: String
}

"""Information related to shipping a physical product."""
input TransactionShippingInput {
  """
  Shipping destination address information.
  *Required for Level 3 processing*.
  """
  shippingAddress: AddressInput

  """
  Shipping cost on the entire transaction.
  *Required for Level 3 processing*.
  """
  shippingAmount: String

  """
  The postal code of the source shipping location, in any country's format.
  *Required for Level 3 processing*.
  """
  shipsFromPostalCode: String
}

"""The origin of a request that created or changed a transaction."""
enum TransactionSource {
  API
  CONTROL_PANEL
  RECURRING
  UNKNOWN
}

"""
The status of the transaction, indicating where it is in the [transaction lifecycle](https://articles.braintreepayments.com/get-started/transaction-lifecycle)
and its success or failure. For further details on why any given status
occurred, consult the corresponding `TransactionStatusEvent` in the
transaction's `statusHistory`.
"""
enum TransactionStatus {
  """
  The transaction spent too much time in the `AUTHORIZED` status and was marked
  as expired. Expiration [time frames](https://developers.braintreepayments.com/reference/general/statuses#authorization-expired)
  differ by card type, transaction type, and, in some cases, merchant category.
  """
  AUTHORIZATION_EXPIRED

  """
  The processor authorized the transaction, putting your customer's funds on
  hold. Your customer may see a pending charge on his or her account. However,
  before the customer is actually charged and before you receive the funds, you
  must use the `captureTransaction` mutation. If you do not want to capture the
  transaction, you should use the `reverseTransaction` mutation to avoid a
  misuse of authorization fee.
  """
  AUTHORIZED

  """
  If a transaction remains in a status of `AUTHORIZING`, [contact Braintree
  Support for assistance](https://help.braintreepayments.com).
  """
  AUTHORIZING

  """
  An error occurred when sending the transaction to the downstream processor.
  See the transaction's `statusHistory` for the exact error.
  """
  FAILED

  """
  The transaction was [rejected](https://articles.braintreepayments.com/control-panel/transactions/gateway-rejections)
  based on one or more settings or rules in your Braintree gateway. See the
  transaction's `statusHistory` to determine which resulted in the decline.
  """
  GATEWAY_REJECTED

  """
  The processor declined the transaction while attempting to authorize it. See
  the transaction's `statusHistory` to determine what reason the processor gave
  for the decline.
  """
  PROCESSOR_DECLINED

  """
  The transaction has been settled, meaning your customer has been charged and
  the process of disbursing the funds to your bank account will begin.
  """
  SETTLED
  SETTLEMENT_CONFIRMED @deprecated(reason: "No longer applicable to any supported payment method types.")

  """
  The processor declined the transaction while attempting to capture it. See the
  transaction's `statusHistory` to detemine why it was not settled. This status
  is rare, and only certain types of transactions can be affected.
  """
  SETTLEMENT_DECLINED

  """
  The transaction has not yet fully settled. This status is rare, and will
  generally resolve to a status of `SETTLED`. Only certain types of transactions
  can be affected.
  """
  SETTLEMENT_PENDING

  """
  The transaction is in the process of being settled. This is a transitory state, and will resolve to a status of `SETTLED`.
  """
  SETTLING

  """
  The transaction has been successfully captured, and will be included in the
  next settlement batch, at which time it will become settled.
  """
  SUBMITTED_FOR_SETTLEMENT

  """
  The transaction was voided, meaning it is no longer authorized, your
  customer's funds are no longer on hold, and you cannot use the
  `captureTransaction` mutation on this transaction.
  """
  VOIDED
}

"""Status event in the lifecycle of a transaction."""
interface TransactionStatusEvent {
  """New status of the transaction."""
  status: TransactionStatus

  """Date and time at which the status event occurred."""
  timestamp: Timestamp

  """Amount of the transaction applicable to the status."""
  amount: MonetaryAmount

  """Source that caused the transaction status event to occur."""
  source: TransactionSource

  """
  Whether this is the final state for the transaction. If false, this transaction will pass into another subsequent state.
  """
  terminal: Boolean
}

"""Information related to taxes on the transaction."""
type TransactionTaxInformation {
  """Amount of tax that was included in the total transaction amount."""
  taxAmount: Amount

  """
  Whether the transaction should be considered eligible for tax exemption.
  """
  taxExempt: Boolean
}

"""Information related to taxes on the transaction."""
input TransactionTaxInput {
  """
  Amount of tax that was included in the total transaction amount. Does not add
  to the total amount the payment method will be charged.
  *Required for Level 2 processing* unless `taxExempt` is `true`.
  """
  taxAmount: Amount

  """
  Whether the transaction should be considered eligible for tax exemption.
  *Required for Level 2 processing*.
  """
  taxExempt: Boolean
}

"""Configuration for UnionPay cards."""
type UnionPayConfiguration {
  """The Braintree merchant account ID with UnionPay processing enabled."""
  merchantAccountId: String
}

"""Top-level field for updating a customer."""
input UpdateCustomerInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of the customer to be updated."""
  customerId: ID!

  """Input fields for the updates to be made on the customer."""
  customer: CustomerInput
}

"""Top-level fields returned when updating a customer."""
type UpdateCustomerPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """Information about the customer that was updated."""
  customer: Customer
}

"""
A billing address for a U.S. bank account. This is a subset of the fields
required in `AddressInput`.
"""
input UsBankAccountBillingAddressInput {
  """The street address."""
  streetAddress: String!

  """The extended address information—such as apartment or suite number."""
  extendedAddress: String

  """The city."""
  city: String!

  """The state."""
  state: UsStateCode!

  """The ZIP code."""
  zipCode: UsZipCode!
}

"""The name of the owner of a business U.S. bank account."""
input UsBankAccountBusinessOwnerInput {
  """The name of the business that owns the account."""
  businessName: String!
}

"""Configuration for U.S. bank account processing."""
type UsBankAccountConfiguration {
  """The route id used to process an U.S. bank account payment."""
  routeId: String

  """The public key for Plaid to use to log in to a bank account."""
  plaidPublicKey: String
}

"""Details about a U.S. bank account."""
type UsBankAccountDetails {
  """
  The name of the accountholder. This is either the business name for a
  business account, or the owner's full name for an individual account.
  """
  accountholderName: String

  """The bank account type."""
  accountType: UsBankAccountType

  """The ownership type of the account, i.e. business or personal."""
  ownershipType: UsBankAccountOwnershipType

  """The name of the bank at which the account exists."""
  bankName: String

  """The last four digits of the bank account number."""
  last4: String

  """The routing number of the bank."""
  routingNumber: String

  """Whether the bank account has been verified and can be transacted on."""
  verified: Boolean
}

"""The name of the owner of a personal U.S. bank account."""
input UsBankAccountIndividualOwnerInput {
  """The first name of the accountholder."""
  firstName: String!

  """The last name of the accountholder."""
  lastName: String!
}

"""Input fields for a U.S. bank account object."""
input UsBankAccountInput {
  """The account number of the bank account."""
  accountNumber: UsBankAccountNumber!

  """The routing number of the bank that holds the account."""
  routingNumber: UsBankRoutingNumber!

  """The type of account."""
  accountType: UsBankAccountType!

  """
  Information about the business that owns the account. This should only be specified for business accounts.
  """
  businessOwner: UsBankAccountBusinessOwnerInput

  """
  Information about the individual that owns the account. This should only be specified for individual accounts.
  """
  individualOwner: UsBankAccountIndividualOwnerInput

  """The billing address of the account."""
  billingAddress: UsBankAccountBillingAddressInput

  """
  Language used to prove that you have the customer's explicit permission to debit their bank account.
  """
  achMandate: String!
}

"""An account number containing 4-17 digits."""
scalar UsBankAccountNumber

"""The ownership type of U.S. Bank Account."""
enum UsBankAccountOwnershipType {
  BUSINESS
  PERSONAL
}

"""The type of U.S. Bank Account."""
enum UsBankAccountType {
  CHECKING
  SAVINGS
}

"""
Information specific to verifications of US bank account payment methods.
"""
type UsBankAccountVerificationDetails {
  """Type of US bank account verification performed."""
  method: UsBankAccountVerificationMethod

  """
  Time at which the verification was determined to be successful or not. If
  successful, at this time the payment method will be marked `verified` and you
  will be able to charge it.
  """
  verificationDeterminedAt: Timestamp
}

"""
The type of verification on an US bank account payment method. See our [ACH guide](https://articles.braintreepayments.com/guides/payment-methods/ach#verification-methods).
"""
enum UsBankAccountVerificationMethod {
  """
  Verification conducted independently by the merchant, not through Braintree.
  """
  INDEPENDENT_CHECK

  """
  Verification by micro-deposits transferred to the bank account, which the
  customer must then confirm. The most reliable method, but takes additional time.
  """
  MICRO_TRANSFERS

  """
  Verification via account information. Will complete the verification process
  immediately, but is not supported by all banks.
  """
  NETWORK_CHECK

  """
  Verification at the point of tokenization. Requires integration with a
  third-party provider. Because this requires a different tokenization flow,
  this method of verification is only supported for vaulting tokenized US bank
  account logins, and is not supported when re-verifying a US bank account
  payment method.
  """
  TOKENIZED_CHECK
}

"""Input fields for a U.S. bank login object."""
input UsBankLoginInput {
  """The public token returned from the bank login."""
  publicToken: String!

  """The login provider account id used for the bank login."""
  accountId: String!

  """The type of account."""
  accountType: UsBankAccountType!

  """
  Information about the business that owns the account. This should only be specified for business accounts.
  """
  businessOwner: UsBankAccountBusinessOwnerInput

  """
  Information about the individual that owns the account. This should only be specified for individual accounts.
  """
  individualOwner: UsBankAccountIndividualOwnerInput

  """The billing address of the account."""
  billingAddress: UsBankAccountBillingAddressInput

  """
  Language used to prove that you have the customer's explicit permission to debit their bank account.
  """
  achMandate: String!
}

"""A routing number containing 8 or 9 digits."""
scalar UsBankRoutingNumber

"""Details about a user."""
type User {
  """Unique identifier."""
  id: ID!

  """Email address."""
  email: String

  """Current status."""
  status: UserStatus

  """Full name."""
  name: String

  """Associated roles."""
  roles: [Role!]
}

"""The status of a User."""
enum UserStatus {
  ACTIVE
  DELETED
  PASSIVE
  PENDING
  SUSPENDED
}

"""A two-letter code representing a U.S. state or territory."""
enum UsStateCode {
  AK
  AL
  AR
  AS
  AZ
  CA
  CO
  CT
  DC
  DE
  FL
  GA
  GU
  HI
  IA
  ID
  IL
  IN
  KS
  KY
  LA
  MA
  MD
  ME
  MI
  MN
  MO
  MP
  MS
  MT
  NC
  ND
  NE
  NH
  NJ
  NM
  NV
  NY
  OH
  OK
  OR
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UM
  UT
  VA
  VI
  VT
  WA
  WI
  WV
  WY
}

"""A US ZIP code. Supports DDDDD and DDDDD-DDDD formats."""
scalar UsZipCode

"""Top-level input field for vaulting a limited use PayPal account."""
input VaultLimitedUsePayPalAccountInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """
  ID of an existing single-use PayPal account generated using the order flow.
  """
  paymentMethodId: ID!

  """ID of the customer to associate the resulting payment method with."""
  customerId: ID

  """
  Input fields that specify information about the resulting PayPal account.
  """
  options: VaultLimitedUsePayPalAccountOptionsInput
}

"""
Input fields that specify information about the resulting PayPal account.
"""
input VaultLimitedUsePayPalAccountOptionsInput {
  """
  The total amount of the order. This will be the limit to how much may be captured on the resulting payment method.
  """
  amount: Amount

  """
  Variable passed directly to PayPal for your own tracking purposes. Customers do not see this value.
  """
  customField: String

  """
  Description of the transaction that is displayed to customers in PayPal email receipts.
  """
  description: String

  """
  The PayPal invoice number. It must be unique in your PayPal business account
  and can contain a maxiumum of 127 characters. If specified, transactions
  created from the resulting payment method will have this orderId.
  """
  orderId: String

  """Shipping destination address information."""
  shippingAddress: AddressInput
}

"""
Top-level input field for vaulting a payment method so it can be used multiple times.
"""
input VaultPaymentMethodInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of an existing single-use payment method to be vaulted."""
  paymentMethodId: ID!

  """ID of the merchant account to use when verifying the payment method."""
  verificationMerchantAccountId: ID

  """
  ID of the customer to associate the resulting multi-use payment method with.
  """
  customerId: ID
}

"""Top-level output field from vaulting a payment method."""
type VaultPaymentMethodPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """
  A payment method that has been stored in a merchant's vault and can be reused.
  """
  paymentMethod: PaymentMethod

  """The verification that was run on the payment method prior to vaulting."""
  verification: Verification
}

"""
Top-level input field for vaulting a bank account so it can be used multiple times.
"""
input VaultUsBankAccountInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of an existing single-use payment method to be vaulted."""
  paymentMethodId: ID!

  """ID of the merchant account to use when verifying the payment method."""
  verificationMerchantAccountId: ID

  """
  ID of the customer to associate the resulting multi-use payment method with.
  """
  customerId: ID

  """Type of US bank account verification to perform."""
  verificationMethod: UsBankAccountVerificationMethod!
}

"""Details about a Venmo Account."""
type VenmoAccountDetails {
  """The Venmo username, as chosen by the user."""
  username: String

  """The Venmo user ID."""
  venmoUserId: String
}

"""Configuration for Pay with Venmo."""
type VenmoConfiguration {
  """The Venmo merchant ID."""
  merchantId: String

  """Authorization to use when tokenizing a Venmo payment method."""
  accessToken: String

  """The Venmo environment."""
  environment: VenmoEnvironment
}

"""The environment being used for Pay with Venmo."""
enum VenmoEnvironment {
  PRODUCTION
  SANDBOX
  production
  sandbox
}

"""
A verification reporting whether the payment method has passed your fraud rules
and the issuer has ensured it is associated with a valid account.
"""
type Verification implements Node {
  """Unique identifier."""
  id: ID!

  """Legacy unique identifier."""
  legacyId: ID!

  """
  Snapshot of payment method details that were verified. This will always be present.
  """
  paymentMethodSnapshot: PaymentMethodSnapshot

  """
  The multi-use payment method that was verified, if it was vaulted. The details
  of this PaymentMethod may have changed since it was verified.
  """
  paymentMethod: PaymentMethod

  """For a credit card, the amount used when performing the verification."""
  amount: MonetaryAmount @deprecated(reason: "Depending on the type of payment method being verified, some verifications do not have an amount. On a credit card verification, use `paymentMethodVerificationDetails.amount` instead.")

  """The merchant account used for the verification."""
  merchantAccountId: ID

  """
  The current status of this verification, indicating whether the verification
  was successful. Braintree recommends only vaulting payment methods that are
  successfully verified.
  """
  status: VerificationStatus

  """
  Detailed response information from the processor. Will not be present if the
  verification was rejected prior to contacting the processor.
  """
  processorResponse: VerificationProcessorResponse

  """The date and time at which the verification was created."""
  createdAt: Timestamp

  """
  The reason the verification was rejected. Will only be set if status is GATEWAY_REJECTED.
  """
  gatewayRejectionReason: GatewayRejectionReason

  """Risk data evaluated for this verification."""
  riskData: RiskData

  """
  Details unique to the verification based on payment method type being verified.
  """
  paymentMethodVerificationDetails: VerificationDetails
}

"""A paginated list of verifications."""
type VerificationConnection {
  """A list of verifications."""
  edges: [VerificationConnectionEdge]

  """Information about the page."""
  pageInfo: PageInfo!
}

"""A verification within a VerificationConnection."""
type VerificationConnectionEdge {
  """
  This verification's location within the VerificationConnection. Used for requesting additional pages.
  """
  cursor: String

  """The verification."""
  node: Verification
}

"""
A union of all possible verification details specific to the type of payment method being verified.
"""
union VerificationDetails = UsBankAccountVerificationDetails | CreditCardVerificationDetails

"""Detailed response information from the processor."""
type VerificationProcessorResponse {
  """
  The [processor response code](https://developers.braintreepayments.com/reference/general/processor-responses/authorization-responses)
  indicating the result of attempting the verification.
  """
  legacyCode: String

  """The text explanation of the processor response code."""
  message: String

  """The processing bank's response to the provided CVV."""
  cvvResponse: AvsCvvResponseCode

  """
  The processing bank's response to the provided billing postal or zip code.
  """
  avsPostalCodeResponse: AvsCvvResponseCode

  """The processing bank's response to the provided billing street address."""
  avsStreetAddressResponse: AvsCvvResponseCode
}

"""
The status of the verification, indicating whether the payment method was
successfully verified. Braintree recommends only vaulting payment methods with
successful verifications.
"""
enum VerificationStatus {
  """
  Indicates the verification was unsuccessful because of an issue communicating with the processor.
  """
  FAILED

  """
  Indicates that the verification was unsuccessful because the payment method
  failed one or more fraud checks. In this case, the `gatewayRejectionReason`
  will indicate which fraud check failed.
  """
  GATEWAY_REJECTED

  """Indicates that the verification is pending."""
  PENDING

  """
  Indicates that the verification was unsuccessful based on the response from the processor.
  """
  PROCESSOR_DECLINED

  """Indicates that the verification was successful."""
  VERIFIED

  """Indicates that the verification is in the process of verifying."""
  VERIFYING
}

"""Top-level input field for verifying a multi-use payment method."""
input VerifyPaymentMethodInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of an existing multi-use payment method to be verified."""
  paymentMethodId: ID!

  """ID of the merchant account to use when verifying the payment method."""
  merchantAccountId: ID
}

"""Top-level output field from verifying a payment method."""
type VerifyPaymentMethodPayload {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """The verification that was run on the payment method."""
  verification: Verification
}

"""Top-level input field for retrying a verification on a bank account."""
input VerifyUsBankAccountInput {
  """An identifier used to reconcile requests and responses."""
  clientMutationId: String

  """ID of an existing multi-use payment method to be vaulted."""
  paymentMethodId: ID!

  """ID of the merchant account to use when verifying the payment method."""
  merchantAccountId: ID

  """Type of US bank account verification to perform."""
  verificationMethod: UsBankAccountVerificationMethod!
}

"""Details about the user and merchant authenticated in this request."""
type Viewer {
  """Unique identifier."""
  id: ID @deprecated(reason: "Use `user` for id instead.")

  """Email address."""
  email: String @deprecated(reason: "Use `user` for email instead.")

  """Current status."""
  status: UserStatus @deprecated(reason: "Use `user` for status instead.")

  """Full name."""
  name: String @deprecated(reason: "Use `user` for name instead.")

  """Associated roles."""
  roles: [Role!] @deprecated(reason: "Use `user` for roles instead.")

  """Details about the authenticated user."""
  user: User

  """Details about the authenticated merchant."""
  merchant: Merchant
}

"""Configuration for Visa Checkout."""
type VisaCheckoutConfiguration {
  """The Visa Checkout API key."""
  apiKey: String

  """The Visa Checkout external client ID."""
  externalClientId: String

  """
  A list of card brands supported for Visa Checkout by the current merchant.
  """
  supportedCardBrands: [CreditCardBrandCode]
}

"""
Additional information about the payment method specific to Visa Checkout.
"""
type VisaCheckoutOriginDetails {
  """The Visa assigned identifier of the transaction."""
  callId: String

  """
  The first 6 digits of the credit card, known as the Bank Identification
  Number. This BIN may differ from the BIN of the customer's actual card.
  """
  bin: String
}

"""Accompanying information for a transaction that has been voided."""
type VoidedEvent implements TransactionStatusEvent {
  """The new status of the transaction."""
  status: TransactionStatus

  """The date and time at which the transaction was voided."""
  timestamp: Timestamp

  """
  The amount of the voided transaction. This should match the authorization amount.
  """
  amount: MonetaryAmount

  """The source for the transaction change to the new status."""
  source: TransactionSource

  """Whether this is the final state for the transaction."""
  terminal: Boolean
}

"""A four-digit year."""
scalar Year
